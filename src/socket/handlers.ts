import { Socket } from 'socket.io';
import { logger } from '../utils/logger.js';
import { roomManager } from './rooms.js';
import {
  ClientToServerEvents,
  IInterRoomParams,
  IPlayer,
  ServerToClientEvents,
  SocketErrorSlug,
} from './room-types.js';
import { sendSocketError } from './utils/send-socket-error.js';

export const socketHandler = (socket: Socket) => {
  logger.info(`üîå –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç: ${socket.id}`);

  socket.on(ClientToServerEvents.CREATE_ROOM, ({ name, roomId, characterId }) => {
    logger.info(`üì® ${socket.id} —Ö–æ—á–µ—Ç —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É: ${roomId}`);

    const created = roomManager.create(roomId, socket.id);

    if (!created) {
      sendSocketError(socket, SocketErrorSlug.ALREADY_EXISTS, '–ö–æ–º–Ω–∞—Ç–∞ —Å —Ç–∞–∫–∏–º ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      return;
    }

    const hostPlayer: IPlayer = {
      id: socket.id,
      username: name,
      characterId: characterId,
      isAdmin: true,
    };
    roomManager.join(roomId, hostPlayer);

    socket.join(roomId);
    socket.emit(ServerToClientEvents.ROOM_CREATED, { roomId, socketId: socket.id });

    logger.info(`‚úÖ –ö–æ–º–Ω–∞—Ç–∞ ${roomId} —Å–æ–∑–¥–∞–Ω–∞ —Ö–æ—Å—Ç–æ–º ${socket.id}`);
  });

  socket.on(ClientToServerEvents.ENTER_ROOM, ({ name, roomId, characterId }: IInterRoomParams) => {
    logger.info(`üì® ${socket.id} —Ö–æ—á–µ—Ç –≤–æ–π—Ç–∏ –≤ –∫–æ–º–Ω–∞—Ç—É: ${roomId}`);

    if (!name || !roomId || !characterId) {
      sendSocketError(socket, SocketErrorSlug.VALIDATE_ERROR, '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');

      return;
    }

    const room = roomManager.getRoom(roomId);

    if (!room) {
      sendSocketError(socket, SocketErrorSlug.NOT_FOUND, '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');

      return;
    }

    if (room.state !== 'waiting') {
      sendSocketError(socket, SocketErrorSlug.GAME_IN_PROGRESS, '–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å');

      return;
    }

    if (room.players[socket.id]) {
      sendSocketError(socket, SocketErrorSlug.ALREADY_IN_ROOM, '–ö–æ–º–Ω–∞—Ç–∞ —Å —Ç–∞–∫–∏–º ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');

      return;
    }

    const player: IPlayer = {
      id: socket.id,
      username: name,
      characterId: characterId,
      isAdmin: false,
    };

    roomManager.join(roomId, player);
    socket.join(roomId);

    logger.info(`‚úÖ ${socket.id} –≤–æ—à—ë–ª –≤ –∫–æ–º–Ω–∞—Ç—É ${roomId}`);

    socket.emit(ServerToClientEvents.CHANGE_PLAYERS_COUNT, { roomId, players: Object.values(room.players) });
    socket.emit(ServerToClientEvents.PLAYER_JOINED, { roomId, socketId: socket.id });
    socket.to(roomId).emit(ServerToClientEvents.CHANGE_PLAYERS_COUNT, { players: Object.values(room.players) });
  });

  socket.on(ClientToServerEvents.GET_PLAYERS, ({ roomId }) => {
    if (!roomId) {
      sendSocketError(socket, SocketErrorSlug.ROOM_NOT_FOUND, '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');

      return;
    }

    logger.info(`üì® ${socket.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–Ω–∞—Ç—ã: ${roomId}`);

    const room = roomManager.getRoom(roomId);

    if (!room) {
      sendSocketError(socket, SocketErrorSlug.NOT_FOUND, '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    socket.emit(ServerToClientEvents.SET_PLAYERS, { players: Object.values(room.players) });
  });

  socket.on(ClientToServerEvents.DISCONNECT, () => {
    logger.info(`‚ùå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è: ${socket.id}`);

    // –ù–∞—Ö–æ–¥–∏–º –∫–æ–º–Ω–∞—Ç—É, –≥–¥–µ –±—ã–ª —ç—Ç–æ—Ç –∏–≥—Ä–æ–∫
    //todo: —Ç—É—Ç –Ω—É–∂–Ω–æ –ø—Ä–æ–¥—É–º–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ
    const room = roomManager.findRoomByPlayerId(socket.id);
    if (!room) return;

    // –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
    roomManager.leave(room.id, socket.id);

    logger.info(`üö™ –ò–≥—Ä–æ–∫ ${socket.id} –≤—ã—à–µ–ª –∏–∑ –∫–æ–º–Ω–∞—Ç—ã ${room.id}`);

    // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç ‚Äî —É–¥–∞–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É
    if (Object.keys(room.players).length === 0) {
      logger.info(`üóë –ö–æ–º–Ω–∞—Ç–∞ ${room.id} —É–¥–∞–ª–µ–Ω–∞ (–ø—É—Å—Ç–∞—è)`);
    } else {
      // –û–ø–æ–≤–µ—â–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö, —á—Ç–æ –∏–≥—Ä–æ–∫ –≤—ã—à–µ–ª
      socket.to(room.id).emit('playerLeft', { players: Object.values(room.players) });
      socket.to(room.id).emit('changePlayersCount', { players: Object.values(room.players) });
    }
  });
};
