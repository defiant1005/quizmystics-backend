import { Socket } from 'socket.io';
import { logger } from '../utils/logger.js';
import { roomManager } from './rooms.js';
import { IPlayer } from './room-types.js';

export const socketHandler = (socket: Socket) => {
  logger.info(`üîå –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç: ${socket.id}`);

  socket.on('createRoom', ({ roomId, username, character }) => {
    logger.info(`üì® ${socket.id} —Ö–æ—á–µ—Ç —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É: ${roomId}`);

    const created = roomManager.create(roomId, socket.id);

    if (!created) {
      socket.emit('error', {
        message: '–ö–æ–º–Ω–∞—Ç–∞ —Å —Ç–∞–∫–∏–º ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
        slug: 'already_exists',
      });
      return;
    }

    const hostPlayer: IPlayer = {
      id: socket.id,
      username: username || 'Host',
      character: character || null,
    };
    roomManager.join(roomId, hostPlayer);

    socket.join(roomId);
    socket.emit('roomCreated', { roomId, hostId: socket.id });

    logger.info(`‚úÖ –ö–æ–º–Ω–∞—Ç–∞ ${roomId} —Å–æ–∑–¥–∞–Ω–∞ —Ö–æ—Å—Ç–æ–º ${socket.id}`);
  });

  socket.on('enterRoom', ({ roomId, username, character }) => {
    logger.info(`üì® ${socket.id} —Ö–æ—á–µ—Ç –≤–æ–π—Ç–∏ –≤ –∫–æ–º–Ω–∞—Ç—É: ${roomId}`);

    const room = roomManager.getRoom(roomId);

    if (!room) {
      socket.emit('error', {
        message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
        slug: 'not_found',
      });
      return;
    }

    if (room.state !== 'waiting') {
      socket.emit('error', {
        message: '–ù–µ–ª—å–∑—è –≤–æ–π—Ç–∏ ‚Äî –∏–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å',
        slug: 'game_in_progress',
      });
      return;
    }

    if (room.players[socket.id]) {
      socket.emit('error', {
        message: '–í—ã —É–∂–µ –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ',
        slug: 'already_in_room',
      });
      return;
    }

    const player: IPlayer = {
      id: socket.id,
      username: username || 'Guest',
      character: character || null,
    };

    roomManager.join(roomId, player);
    socket.join(roomId);

    logger.info(`‚úÖ ${socket.id} –≤–æ—à—ë–ª –≤ –∫–æ–º–Ω–∞—Ç—É ${roomId}`);

    socket.emit('changePlayersCount', { roomId, players: Object.values(room.players) });
    socket.emit('userJoined', { roomId });
    socket.to(roomId).emit('changePlayersCount', { players: Object.values(room.players) });
  });

  socket.on('disconnect', () => {
    logger.info(`‚ùå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è: ${socket.id}`);

    // –ù–∞—Ö–æ–¥–∏–º –∫–æ–º–Ω–∞—Ç—É, –≥–¥–µ –±—ã–ª —ç—Ç–æ—Ç –∏–≥—Ä–æ–∫
    const room = roomManager.findRoomByPlayerId(socket.id);
    if (!room) return;

    // –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
    roomManager.leave(room.id, socket.id);

    logger.info(`üö™ –ò–≥—Ä–æ–∫ ${socket.id} –≤—ã—à–µ–ª –∏–∑ –∫–æ–º–Ω–∞—Ç—ã ${room.id}`);

    // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç ‚Äî —É–¥–∞–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É
    if (Object.keys(room.players).length === 0) {
      logger.info(`üóë –ö–æ–º–Ω–∞—Ç–∞ ${room.id} —É–¥–∞–ª–µ–Ω–∞ (–ø—É—Å—Ç–∞—è)`);
    } else {
      // –û–ø–æ–≤–µ—â–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö, —á—Ç–æ –∏–≥—Ä–æ–∫ –≤—ã—à–µ–ª
      socket.to(room.id).emit('playerLeft', { players: Object.values(room.players) });
      socket.to(room.id).emit('changePlayersCount', { players: Object.values(room.players) });
    }
  });
};
