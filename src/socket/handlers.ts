import { Socket } from 'socket.io';
import { logger } from '../utils/logger.js';
import { roomManager } from './rooms.js';

import { sendSocketError } from './utils/send-socket-error.js';
import { ClientToServerEvents, ServerToClientEvents, SocketErrorSlug } from './types/socket-types.js';

import { GameState, IPlayer } from './types/game-types.js';
import {
  IChangePlayerReadyParams,
  ICreateRoomParams,
  IGetPlayersParams,
  IInterRoomParams,
} from './types/client-server-response-types.js';
import {
  IRoomCreatedResponse,
  ISuccessEnterResponse,
  IUpdatePlayersResponse,
} from './types/server-client-response-types.js';

export const socketHandler = (socket: Socket) => {
  logger.info(`üîå –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç: ${socket.id}`);

  socket.on(ClientToServerEvents.CREATE_ROOM, (params: ICreateRoomParams) => {
    logger.info(`üì® ${socket.id} —Ö–æ—á–µ—Ç —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É: ${params.roomId}`);

    const created = roomManager.create(params.roomId, socket.id);

    if (!created) {
      sendSocketError(socket, SocketErrorSlug.ALREADY_EXISTS, '–ö–æ–º–Ω–∞—Ç–∞ —Å —Ç–∞–∫–∏–º ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      return;
    }

    const hostPlayer: IPlayer = {
      id: socket.id,
      username: params.name,
      characterId: params.characterId,
      isAdmin: true,
    };

    const res = roomManager.joinByName(params.roomId, hostPlayer);
    if (res.status === 'name_taken') {
      sendSocketError(socket, SocketErrorSlug.NAME_TAKEN, '–ò–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ –≤ –∫–æ–º–Ω–∞—Ç–µ');
      return;
    }

    socket.join(params.roomId);

    const roomCreatedResponse: IRoomCreatedResponse = {
      roomId: params.roomId,
      socketId: socket.id,
      name: params.name,
    };

    socket.emit(ServerToClientEvents.ROOM_CREATED, roomCreatedResponse);

    const room = roomManager.getRoom(params.roomId);

    const updatePlayersResponse: IUpdatePlayersResponse = {
      players: Object.values(room!.players),
    };
    socket.emit(ServerToClientEvents.UPDATE_PLAYERS, updatePlayersResponse);

    logger.info(`‚úÖ –ö–æ–º–Ω–∞—Ç–∞ ${params.roomId} —Å–æ–∑–¥–∞–Ω–∞ —Ö–æ—Å—Ç–æ–º ${socket.id}`);
  });

  socket.on(ClientToServerEvents.ENTER_ROOM, (data: IInterRoomParams) => {
    logger.info(`üì® ${socket.id} —Ö–æ—á–µ—Ç –≤–æ–π—Ç–∏ –≤ –∫–æ–º–Ω–∞—Ç—É: ${data.roomId}`);

    if (!data.name || !data.roomId) {
      sendSocketError(socket, SocketErrorSlug.VALIDATE_ERROR, '–£–∫–∞–∂–∏—Ç–µ –∏–º—è –∏ –Ω–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã');
      return;
    }

    const room = roomManager.getRoom(data.roomId);
    if (!room) {
      sendSocketError(socket, SocketErrorSlug.NOT_FOUND, '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    if (room.state !== GameState.WAITING) {
      sendSocketError(socket, SocketErrorSlug.GAME_IN_PROGRESS, '–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å');
      return;
    }

    if (Object.values(room.players).length === 8) {
      sendSocketError(socket, SocketErrorSlug.EXCEEDED_LIMIT, '–ò–≥—Ä–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –¥–æ 8 –∏–≥—Ä–æ–∫–æ–≤');
      return;
    }

    const existing = room.players[data.name.toLowerCase()];
    if (!existing && !data.characterId) {
      sendSocketError(socket, SocketErrorSlug.VALIDATE_ERROR, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞');
      return;
    }

    const player: IPlayer = {
      id: socket.id,
      username: data.name,
      characterId: data.characterId ?? existing?.characterId!,
      isAdmin: false,
    };

    const res = roomManager.joinByName(data.roomId, player);

    if (res.status === 'not_found') {
      sendSocketError(socket, SocketErrorSlug.NOT_FOUND, '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    if (res.status === 'name_taken') {
      sendSocketError(socket, SocketErrorSlug.NAME_TAKEN, '–ò–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–Ω–ª–∞–π–Ω)');
      return;
    }

    socket.join(data.roomId);
    const updatedRoom = roomManager.getRoom(data.roomId)!;

    const successEnterResponse: ISuccessEnterResponse = {
      roomId: data.roomId,
      name: data.name,
    };

    socket.emit(ServerToClientEvents.SUCCESS_ENTER, successEnterResponse);

    const updatePlayersResponse: IUpdatePlayersResponse = {
      players: Object.values(updatedRoom.players),
    };

    socket.emit(ServerToClientEvents.UPDATE_PLAYERS, updatePlayersResponse);

    socket.to(data.roomId).emit(ServerToClientEvents.UPDATE_PLAYERS, updatePlayersResponse);

    logger.info(`‚úÖ ${socket.id} (${data.name}) –≤–æ—à—ë–ª/–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –≤ –∫–æ–º–Ω–∞—Ç—É ${data.roomId}`);
  });

  socket.on(ClientToServerEvents.GET_PLAYERS, (data: IGetPlayersParams) => {
    if (!data.roomId) {
      sendSocketError(socket, SocketErrorSlug.ROOM_NOT_FOUND, '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    const room = roomManager.getRoom(data.roomId);
    if (!room) {
      sendSocketError(socket, SocketErrorSlug.NOT_FOUND, '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    const updatePlayersResponse: IUpdatePlayersResponse = {
      players: Object.values(room.players),
    };

    socket.emit(ServerToClientEvents.UPDATE_PLAYERS, updatePlayersResponse);
  });

  socket.on(ClientToServerEvents.CHANGE_PLAYER_READY, (data: IChangePlayerReadyParams) => {
    if (!data.roomId || !data.username) {
      sendSocketError(socket, SocketErrorSlug.VALIDATE_ERROR, '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
      return;
    }

    roomManager.editUserReady(data.roomId, data.username, data.isReady);

    const room = roomManager.getRoom(data.roomId);

    if (!room) {
      sendSocketError(socket, SocketErrorSlug.NOT_FOUND, '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    const updatePlayersResponse: IUpdatePlayersResponse = {
      players: Object.values(room.players),
    };

    socket.emit(ServerToClientEvents.UPDATE_PLAYERS, updatePlayersResponse);
    socket.to(data.roomId).emit(ServerToClientEvents.UPDATE_PLAYERS, updatePlayersResponse);
  });

  socket.on(ClientToServerEvents.DISCONNECT, () => {
    logger.info(`‚ùå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è: ${socket.id}`);

    const room = roomManager.markDisconnectBySocketId(socket.id);
    if (!room) return;

    const updatePlayersResponse: IUpdatePlayersResponse = {
      players: Object.values(room.players),
    };

    socket.to(room.id).emit(ServerToClientEvents.UPDATE_PLAYERS, updatePlayersResponse);

    logger.info(`üö™ –ò–≥—Ä–æ–∫ —Å socketId ${socket.id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –æ—Ç–∫–ª—é—á—ë–Ω–Ω—ã–π –≤ –∫–æ–º–Ω–∞—Ç–µ ${room.id}`);
  });
};
