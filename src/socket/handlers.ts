// handlers.ts
import { Socket } from 'socket.io';
import { logger } from '../utils/logger.js';
import { roomManager } from './rooms.js';
import {
  ClientToServerEvents,
  IInterRoomParams,
  IPlayer,
  ServerToClientEvents,
  SocketErrorSlug,
} from './room-types.js';
import { sendSocketError } from './utils/send-socket-error.js';

export const socketHandler = (socket: Socket) => {
  logger.info(`üîå –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç: ${socket.id}`);

  socket.on(ClientToServerEvents.CREATE_ROOM, ({ name, roomId, characterId }) => {
    logger.info(`üì® ${socket.id} —Ö–æ—á–µ—Ç —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É: ${roomId}`);

    const created = roomManager.create(roomId, socket.id);

    if (!created) {
      sendSocketError(socket, SocketErrorSlug.ALREADY_EXISTS, '–ö–æ–º–Ω–∞—Ç–∞ —Å —Ç–∞–∫–∏–º ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      return;
    }

    const hostPlayer: IPlayer = {
      id: socket.id,
      username: name,
      characterId,
      isAdmin: true,
    };

    const res = roomManager.joinByName(roomId, hostPlayer);
    if (res.status === 'name_taken') {
      // –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω—ã–π –∫–µ–π—Å ‚Äî –∏–º—è —Ö–æ—Å—Ç–∞ —É–∂–µ –∑–∞–Ω—è—Ç–æ (—Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –ª–æ–≥–∏–∫–∞ —Ñ—Ä–æ–Ω—Ç–∞ –Ω–µ –¥–∞—Å—Ç)
      sendSocketError(socket, SocketErrorSlug.NAME_TAKEN, '–ò–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ –≤ –∫–æ–º–Ω–∞—Ç–µ');
      return;
    }

    socket.join(roomId);
    socket.emit(ServerToClientEvents.ROOM_CREATED, { roomId, socketId: socket.id, name });

    // –æ–ø–æ–≤–µ—Å—Ç–∏–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (—Å–µ–π—á–∞—Å —Ç–æ–ª—å–∫–æ —Ö–æ—Å—Ç)
    const room = roomManager.getRoom(roomId);
    socket.emit(ServerToClientEvents.SET_PLAYERS, { players: Object.values(room!.players) });

    logger.info(`‚úÖ –ö–æ–º–Ω–∞—Ç–∞ ${roomId} —Å–æ–∑–¥–∞–Ω–∞ —Ö–æ—Å—Ç–æ–º ${socket.id}`);
  });

  socket.on(ClientToServerEvents.ENTER_ROOM, ({ name, roomId, characterId }: IInterRoomParams) => {
    logger.info(`üì® ${socket.id} —Ö–æ—á–µ—Ç –≤–æ–π—Ç–∏ –≤ –∫–æ–º–Ω–∞—Ç—É: ${roomId}`);

    if (!name || !roomId) {
      sendSocketError(socket, SocketErrorSlug.VALIDATE_ERROR, '–£–∫–∞–∂–∏—Ç–µ –∏–º—è –∏ –Ω–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã');
      return;
    }

    const room = roomManager.getRoom(roomId);
    if (!room) {
      sendSocketError(socket, SocketErrorSlug.NOT_FOUND, '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    if (room.state !== 'waiting') {
      sendSocketError(socket, SocketErrorSlug.GAME_IN_PROGRESS, '–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å');
      return;
    }

    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –∏–≥—Ä–æ–∫ ‚Äî –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω characterId
    const existing = room.players[name.toLowerCase()];
    if (!existing && !characterId) {
      sendSocketError(socket, SocketErrorSlug.VALIDATE_ERROR, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞');
      return;
    }

    const player: IPlayer = {
      id: socket.id,
      username: name,
      characterId: characterId ?? existing?.characterId!,
      isAdmin: false,
    };

    const res = roomManager.joinByName(roomId, player);

    if (res.status === 'not_found') {
      sendSocketError(socket, SocketErrorSlug.NOT_FOUND, '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    if (res.status === 'name_taken') {
      sendSocketError(socket, SocketErrorSlug.NAME_TAKEN, '–ò–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–Ω–ª–∞–π–Ω)');
      return;
    }

    // joined OR reconnected
    socket.join(roomId);
    const updatedRoom = roomManager.getRoom(roomId)!;

    socket.emit(ServerToClientEvents.SET_PLAYERS, { players: Object.values(updatedRoom.players), roomId, name });
    socket
      .to(roomId)
      .emit(ServerToClientEvents.SET_PLAYERS, { players: Object.values(updatedRoom.players), roomId, name });

    socket.emit(ServerToClientEvents.CHANGE_PLAYERS_COUNT, { roomId, players: Object.values(updatedRoom.players) });
    socket.to(roomId).emit(ServerToClientEvents.CHANGE_PLAYERS_COUNT, { players: Object.values(updatedRoom.players) });

    logger.info(`‚úÖ ${socket.id} (${name}) –≤–æ—à—ë–ª/–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –≤ –∫–æ–º–Ω–∞—Ç—É ${roomId}`);
  });

  socket.on(ClientToServerEvents.GET_PLAYERS, ({ roomId }) => {
    if (!roomId) {
      sendSocketError(socket, SocketErrorSlug.ROOM_NOT_FOUND, '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    const room = roomManager.getRoom(roomId);
    if (!room) {
      sendSocketError(socket, SocketErrorSlug.NOT_FOUND, '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    socket.emit(ServerToClientEvents.SET_PLAYERS, { players: Object.values(room.players) });
  });

  socket.on(ClientToServerEvents.DISCONNECT, () => {
    logger.info(`‚ùå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è: ${socket.id}`);

    const room = roomManager.markDisconnectBySocketId(socket.id);
    if (!room) return;

    // —É–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö, —á—Ç–æ —Å—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–∫–æ–≤ –∏–∑–º–µ–Ω–∏–ª—Å—è (—É –∫–æ–≥–æ-—Ç–æ –ø–æ—è–≤–∏–ª—Å—è disconnectedAt)
    socket.to(room.id).emit(ServerToClientEvents.SET_PLAYERS, { players: Object.values(room.players) });
    socket.to(room.id).emit(ServerToClientEvents.CHANGE_PLAYERS_COUNT, { players: Object.values(room.players) });

    logger.info(`üö™ –ò–≥—Ä–æ–∫ —Å socketId ${socket.id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –æ—Ç–∫–ª—é—á—ë–Ω–Ω—ã–π –≤ –∫–æ–º–Ω–∞—Ç–µ ${room.id}`);
  });
};
